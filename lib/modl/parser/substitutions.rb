# frozen_string_literal: true

require 'singleton'

module Modl::Parser
  class Substitutions
    include Singleton

    def initialize
      @subs = [
        ['~\\', '\\'],
        ['\\\\', '\\'],
        ['~~', '~'],
        ['\\~', '~'],
        ['~(', '('],
        ['\\(', '('],
        ['~)', ')'],
        ['\\)', ')'],
        ['~[', '['],
        ['\\[', '['],
        ['~]', ']'],
        ['\\]', ']'],
        ['~{', '{'],
        ['\\{', '{'],
        ['~}', '}'],
        ['\\}', '}'],
        ['~;', ';'],
        ['\\;', ';'],
        ['~:', ':'],
        ['\\:', ':'],
        ['~`', '`'],
        ['\\`', '`'],
        ['~"', '"'],
        ['\\"', '"'],
        ['~=', '='],
        ['\\=', '='],
        ['~/', '/'],
        ['\\/', '/'],
        ['<', '<'],
        ['\\<', '<'],
        ['~>', '>'],
        ['\\>', '>'],
        ['~&', '&'],
        ['\\&', '&'],
        ['!', '!'],
        ['\\!', '!'],
        ['~|', '|'],
        ['\\|', '|'],
        ['\\t', "\t"],
        ['\\n', "\n"],
        ['\\b', "\b"],
        ['\\f', "\f"],
        ['\\r', "\r"]
      ]
    end

    def process(str)
      @subs.each do |s|
        loop do
          break unless str.sub!(s[0], s[1])
        end
      end
      str
    end
  end
end
